.TH pshell 1 "Sep 2012" "PSHELL" "PSHELL - Process Specific Embedded Command Line Shell"
.SH NAME
pshell/pshell.exp - PSHELL UDP/UNIX client program/Telnet TCP client 'expect' script wrapper
.SH DESCRIPTION
The PSHELL API framework provides the ability to embed a shell type Command Line Interface
(CLI) into any C/C++ application that can then be accessed via either the provided UDP/UNIX
client program (called 'pshell') or via a standard 'telnet' based client.

The 'pshell' program provides the client side command line interface (CLI) functionality
to remotely invoke the callback functions that are registered within a program running a
UDP or UNIX based PshellServer.  It can control processes that are running either the 'C'
version of the PshellServer, which is provided via the PshellServer.h API and the libpshell-server
link libaray, the Python version that is provided via the PshellServer.py module, or the
Go (Golang) version that is provided by the PshellServer.go module and API.

The corresponding 'pshell.exp' 'expect' script provides a wrapper around a standard 'telnet'
client to give a similar functionality (i.e. batch mode, command line mode etc) for programs
that are running a TCP based PshellServer as the 'pshell' UDP/UNIX client program .  Use of
the 'pshell.exp' script is optional, the 'telnet' client can be used directly to interface
to a TCP PshellServer, however, only interactive mode is supported.

Note, there is also a python version of the UDP/UNIX client (pshell.py), it has the same usage
and functionality as this compiled 'C' version, see pydoc pshell for the docmentation.
.SH USAGE
Usage: pshell -s | -n | {{{<hostName | ipAddr>} {<portNum> | <udpServerName>}} | <unixServerName> | <serverIndex>} [-t<timeout>]
                        [{{-c <command> | -f <filename>} [rate=<seconds>] [repeat=<count>] [clear]}]

  where:
    -s              - show all servers running on the local host
    -n              - show named IP server/port mappings in pshell-client.conf file
    -c              - run command from command line
    -f              - run commands from a batch file
    -t              - change the default server response timeout
    hostName        - hostname of UDP server
    ipAddr          - IP addr of UDP server
    portNum         - port number of UDP server
    udpServerName   - name of UDP server from pshell-client.conf file
    unixServerName  - name of UNIX server (use '-s' option to list servers)
    serverIndex     - index of local UNIX or UDP server (use '-s' option to list servers)
    timeout         - response wait timeout in sec (default=5)
    command         - optional command to execute (in double quotes, ex. -c "myCommand arg1 arg2")
    fileName        - optional batch file to execute
    rate            - optional rate to repeat command or batch file (in seconds)
    repeat          - optional repeat count for command or batch file (default=forever)
    clear           - optional clear screen between commands or batch file passes

    NOTE: If no <command> is given, pshell will be started
          up in interactive mode, commands issued in command
          line mode that require arguments must be enclosed
          in double quotes, commands issued in interactive
          mode that require arguments do not require double
          quotes.

          To get help on a command in command line mode, type
          "<command> ?" or "<command> -h".  To get help in
          interactive mode type 'help' or '?' at the prompt to
          see all available commands, to get help on a single
          command, type '<command> {? | -h}'.  Use TAB completion
          to fill out partial commands and up-arrow to recall
          for command history.
.SH EXAMPLES
See the 'README' file that is distributed with this package for detailed instructions
on using this framework.
.SH SEE ALSO
pshellAggregator(1), PshellServer(3), PshellReadline(3), PshellControl(3), TraceFilter(3), TraceLog(3)
.SH AUTHOR
Ron Iovine  --  github.com/RonIovine/pshell
