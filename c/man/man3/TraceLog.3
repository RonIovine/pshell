.TH TraceLog 3 "Sep 2012" "TraceLog" "Trage logging utility"
.SH NAME
TraceLog - Trace logging code instrumentation utility
.SH DESCRIPTION
The TraceLog functionality will provide a basic source code instrumentation logging
mechanism.  It will provide for a macro based API that will allow instrumentation
of the code for debug and diagnostics purposes.  The log format will provide a high
resolution timestamp, code location information (file, function, line) and an optional
user message.  The optional user message uses a varargs format that is identical to
using 'printf', with the only caveat being that a newline ("\n") is automatically
inserted, so need not be explicitley provided.

This utility is integrated with the TraceFilter mechanism to allow for full dynamic
control via the PSHELL client interface.
.SH SYNOPSIS

#include <TraceLog.h>

/* this trace cannot be disabled */
.br
#define TRACE_FORCE(format, args...)

/* normal trace output macros, these are called directly by client code */
.br
#define TRACE_ERROR(format, args...)
.br
#define TRACE_WARNING(format, args...)
.br
#define TRACE_FAILURE(format, args...)
.br
#define TRACE_INFO(format, args...)
.br
#define TRACE_DEBUG(format, args...)
.br
#define TRACE_ENTER(format, args...)
.br
#define TRACE_EXIT(format, args...)

/* hex dump trace */
.br
#define TRACE_DUMP(address, length, format, args...)

/*
.br
 * trace_registerOutputFunction::
.br
 *
.br
 * typedef and function to allow a client program to register a logging
.br
 * function for message output logging, if no output function is registered
.br
 * 'printf' will be used to print out the log messages
.br
 */
.br
typedef void (*TraceOutputFunction)(const char *outputString_);
.br
void trace_registerOutputFunction(TraceOutputFunction outputFunction_);

/*
 * trace_registerFormatFunction:
 *
 * typedef and function to allow a client program to register a custom format
 * function for formatting the trace output line, if no format function is
 * registered the default formatting will be used, e.g.
 *
 * name | level | timestamp | file(function):line | user-message
 *
 */
.br
typedef void (*TraceFormatFunction)(const char *level_,
                                    const char *file_,
                                    const char *function_,
                                    int line_,
                                    const char *timestamp_,
                                    const char *userMessage_,
                                    char *outputString_);
.br
void trace_registerFormatFunction(TraceFormatFunction formatFunction_);

/*
 * trace_setTimestampFormat:
 *
 * set the timestamp format for the strftime function, the default format is hh:mm:ss.usec,
 * if the 'addUsec_' argument is set to true, be sure to use a format where the sec is last
 * since the usec will be appended to that, if no format is specified, the default formatting
 * will be used, e.g. hh:mm:ss.usec in 24 hour local time
 */
.br
void trace_setTimestampFormat(const char *format_, bool addUsec_ = true);

/*
.br
 * trace_setLogName:
.br
 *
.br
 * set a log name that is used as a prefix for the log type,
.br
 * if this function is not called, the prefix will default to
.br
 * "TRACE", e.g. TRACE_ERROR, TRACE_WARNING etc, if this function
.br
 * is called with a NULL prefix, the trace name type will have
.br
 * no prefix, e.g. ERROR, WARNING etc.
.br
 */
.br
void trace_setLogName(const char *name_);

/*
.br
 * trace_registerLevels:
.br
 *
.br
 * register all our above trace levels with the trace filter, note
.br
 * that all levels MUST be registered before calling 'tf_init'
.br
 */
.br
void trace_registerLevels(void);

Link with the library libpshell-server
.SH EXAMPLES
See the file traceFilterDemo.cc in the pshell distribution package for a complete
list of examples of using the TraceLog utility trace logging system.
.SH MT-LEVEL
Safe
.SH SEE ALSO
pshell(1), TraceFilter(3)
.SH AUTHOR
Ron Iovine  --  github.com/RonIovine/pshell
