.TH PshellServer 3 "Sep 2012" "PSHELL" "Process Specific Embedded Command Line Shell"
.SH NAME
PshellServer - A Lightweight, Process-Specific, Embedded Command Line Shell
.SH DESCRIPTION
The PshellServer will provide the API for embedding a lightweight CLI into any
C/C++ program.  The PshellServer can run as either a UDP, TCP, UNIX, or LOCAL.
server.  The UDP and UNIX servers supports multiple client sessions with no
idle session timeout.  It requires the included stand-alone UDP/UNIX client program
(called 'pshell') to communicate with the server.  The TCP based server provides
for a single client session with a configurable idle session timeout (defaults
to 10 minutes).  The TCP based server can be used with a standard 'telnet' client.
The LOCAL server supports a single session server with no idle session timeout.
It will solicit user input directly from the host program, no external client
program is needed.

In addition, the PshellServer can be run in two different operational modes, BLOCKING
or NON_BLOCKING.  In BLOCKING mode, the server is run within the context of the
calling function of the host process.  In NON_BLOCKING mode, the server is run within
the context of a guest daemon thread which is created within the host process.

The server provides a simple 'C' based API to register functions that can be invoked
remotely.  The format of a CLI command is that of a single keyword followed by optional
arguments, based on the function registration.  In that sense it is similar to a standard
command line shell interpreter (as opposed to a multi-keyword based CLI).  The function
that is invoked by the CLI can display data back to the client program (either 'telnet'
or 'pshell') via a mechanism that has an API that is identical to the familiar 'printf'
function.

Finally, a UDP or UNIX pshell server also supports control from an external client
program via the 'PshellControl.h' API.  Refer to the documentation on PshellControl
for details on the API.
.SH SYNOPSIS

#include <PshellServer.h>

/* signature prototype of callback function */

typedef void (*PshellFunction) (int argc, char *argv[]);

void pshell_addCommand(PshellFunction function_,
                       const char *command_,
                       const char *description_,
                       const char *usage_ = NULL,
                       unsigned char minArgs_ = 0,
                       unsigned char maxArgs_ = 0,
                       bool showUsage_ = true);

/* note, for a LOCAL or UNIX server, the last two parameters should be omitted */

void pshell_startServer(const char *serverName_,
                        PshellServerType serverType_,
                        PshellServerMode serverMode_,
                        const char *hostnameOrIpAddr_ = NULL,
                        unsigned port_ = 0);

void pshell_printf(const char *format_, ...);

The above synposis is just a summary of the most relevant part of the API,
to see the full API refer to the include file 'PshellServer.h'

Link with the library libpshell-server

Note, there is also python and go version implementations of this functionality in the
modules 'PshellServer.py' and 'PshellServer.go'

Their APIs and examples can be found in their corresponding language based directories
of this install package.
.SH EXAMPLES
See the file pshellServerDemo.cc in the pshell distribution package for a complete
list of examples of writing and registering PSHELL callback functions.
.SH MT-LEVEL
Only one PshellServer server can be opened and run per executable image.
For NON_BLOCKING mode, a server thread will be created within the target
program.  All CLI callback functions are executed within the context of
this thread.  For BLOCKING mode, all CLI callback functions are executed
within the context of the caller of the pshell_startServer function.  The
PshellServer will ensure that it cannot be run more than once.
.SH SEE ALSO
pshell(1), PshellReadline(3), PshellControl(3)
.SH AUTHOR
Ron Iovine  --  github.com/RonIovine/pshell
